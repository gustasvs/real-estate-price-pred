// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole?       @default(ADMIN)
  Authenticator  Authenticator[]

  isFirstLogin Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  residenceGroups ResidenceGroup[]
}

model ResidenceGroup {
  id      String      @id @default(uuid())
  name    String
  userId  String
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  objects Residence[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Residence {
  id          String @id @default(uuid())
  name        String
  address     String
  area        Float
  description String
  
  favourite Boolean @default(false)

  bedroomCount  Int
  bathroomCount Int
  parkingCount  Int

  price          Float
  predictedPrice Float

  groupId        String
  residenceGroup ResidenceGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  pictures String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
