// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  role           UserRole?       @default(USER)

  isFirstLogin Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  theme String?
  fontSize String?
  colorMode String?

  residenceGroups ResidenceGroup[]
}

model ResidenceGroup {
  id      String      @id @default(uuid())
  name    String
  userId  String
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  objects Residence[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Residence {
  id          String @id @default(uuid())
  name        String
  address     String
  area        Float
  description String
  
  favourite Boolean @default(false)

  roomCount     Int
  parkingAvailable  Boolean @default(false)
  elevatorAvailable Boolean @default(false)

  buildingFloors Int
  floor          Int

  price          Float
  predictedPrice Float

  groupId        String
  residenceGroup ResidenceGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  pictures String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}